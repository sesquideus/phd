       SUBROUTINE old_ssc(w,NX,NKX,G,WV,S,D,sx,SI,R1)

C        SSC CALCULATES THE SINGLE SCATTERING ALBEDO (W).
C	INPUT -- U, UO, Nx, NKx, G, WV, S, D
C	OUTPUT -- W, SX, SI, (SE), R1

       real*8 w,nx,nkx,g,wv,s,d,sx,si,r1
       real*8 UX,VX,RR,RL,q2
       real*8 arg1,arg2,arg3,dumm,num,den

       sx=0.
       si=0.
       r1=0.
       
       dumm = nx**2 - nkx**2 - dsin(g/2.)**2
       arg1 = dumm**2 + (4. * NX**2 * NKX**2)
       if(arg1.lt.0.) then
          arg1 = 0.
       endif

       arg2 = dumm + dsqrt(arg1)
       if(arg2.lt.0.) then
          arg2 = 0.
       endif
       arg2 = arg2 / 2.
       ux = dsqrt(arg2)

       arg3 = (-1. * dumm) + dsqrt(arg1)
       if(arg3.lt.0.) then
          arg3 = 0.
       endif
       arg3 = arg3 / 2.
       vx = dsqrt(arg3)

       num = (dcos(G/2.) - UX)**2 + VX**2
       den = (dcos(G/2.) + UX)**2 + VX**2
       rr = num / den
 
        num = ( (NX**2 - NKX**2) * dcos(G/2.) - UX )**2
     $     +  ( 2. * NX * NKX * dcos(G/2.) - VX )**2
        den = ( (NX**2 - NKX**2) * dcos(G/2.) + UX )**2
     $     +  ( 2. * NX * NKX * dcos(G/2.) + VX )**2
        RL = num / den

        sx = (RR + RL) / 2.

C    INTG1 INTEGRATES THE COMPONENTS OF SINGLE SCATTERING REFLECTION
C    SE (REFLECTION FROM SURFACE) AND SI (ELEMENT REFRACTED INTO
C    VOLUME).  INPUT -- NX,NKXS; OUTPUT -- SI (SE)
c      print *, 'in old_ssc, before intg1'
c      print *, 'w= ', w, ' nx= ',nx
c      print *, 'nk= ',nkx, 'g= ',g
c      print *, 'wv= ',wv, ' s= ', s
c      print *, ' d= ', d,' sx= ',sx
c      print *, ' si= ', si, ' r1= ',r1
c      pause 12

          call intg1(si,nx)
c      print *, 'in old_ssc, after intg1'
c      print *, 'si= ', si,' sx= ', sx,' r1= ',r1
c      pause 15

         ALPHA=(4. * 3.1415927 * NKX) / WV
         IF(  (ALPHA.EQ.0.) .OR. (ALPHA.LT.1.E-15) )THEN
             R1=1.
         ELSE IF(S.LT.1.E-15) THEN
             R1=0.
         ELSE
             num = 1. - dsqrt( (ALPHA / (ALPHA + S)) )
             den = 1. + dsqrt( (ALPHA / (ALPHA + S)) )
             r1 = num / den
         END IF

         num = (1. - sx) * (1. - SI)
     $     * (R1 + dexp( -2. * dsqrt( ALPHA * (ALPHA+S) ) * D / 3.) )
         den = 1. - (R1 * SI)
     $   + (R1 - SI) * dexp( -2. * dsqrt( ALPHA * (ALPHA+S) ) * D / 3.)

         q2 = num / den
         W = sx + Q2

c        because of potenital round-off errors, check that the single
c        scattering albedo does not exceed 1.0

	 if (w .gt. 1.) then
            w = 1.0
         endif
        RETURN
        END
